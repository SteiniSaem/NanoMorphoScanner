%{
	import java.io.*;
	import java.util.HashMap;
	import java.util.Arrays;
%}

%token <sval> NAME, VAR, OPNAME, LITERAL, IF, ELSIF, ELSE, RETURN

%%

program
	:	function
	;

function
	:	NAME '(' expr_star ')' '{' decl_star expr_star '}'
	;

expr_star
	:	expr_plus
	|
	;

expr_plus
	:	expr_plus ',' expr
	|	expr
	;

decl_star
	:	decl_plus
	|
	;
decl_plus
	:	decl_plus decl_atom
	|	decl_atom
	;

decl_atom
	:	VAR name_plus ';'
	;

name_plus
	:	name_plus ',' NAME
	|	NAME
	;

expr
	:	RETURN expr
	|	NAME '=' expr
	|	binopexpr
	;

binopexpr
	:	smallexpr opname_smallexpr_plus
	;

opname_smallexpr_plus
	:	opname_smallexpr_plus OPNAME smallexpr
	|	OPNAME smallexpr
	;

smallexpr
	:	NAME
	|	NAME '(' expr_star ')'
	|	OPNAME smallexpr
	|	LITERAL
	|	'(' expr ')'
	|	ifexpr
	|	'while' '(' expr ')' body
	;

ifexpr
	:	IF '(' expr ')' body ifexpr_elif
	;

ifexpr_elif
	:	ELSIF '(' expr ')' body ifexpr_elif
	|	ifexpr_else
	|
	;

ifexpr_else
	:	ELSE body
	;

body
	:	'{' expr_plus '}'
	;


%%



	final static boolean generateAndOr = true;
	final static boolean generateExp = true;
	static boolean DEBUG = false;

	static void generateProgram(String filename, Object[] funs) {
		String programname = filename.substring(0, filename.indexOf('.'));
		debug("Starting printing of program...");
		System.out.println("\"" + programname + ".mexe\" = main in");
		System.out.println("!");
		System.out.println("{{");
		for (Object f : funs) {
			generateFunction((Object[]) f);
		}
		System.out.println("}}");
		if (generateAndOr) {
			System.out.println("*");
			System.out.println("{{");
			System.out.println("#\"+[f1]\" = ");
			System.out.println("[");
			System.out.println("(Return)");
			System.out.println("];");
			System.out.println("}}");
			System.out.println("*");
			System.out.println("{{");
			System.out.println("#\"|[f2]\" = ");
			System.out.println("[");
			System.out.println("(CallR #\"||[f2]\" 2)");
			System.out.println("];");
			System.out.println("}}");
			System.out.println("*");
			System.out.println("{{");
			System.out.println("#\"&[f2]\" = ");
			System.out.println("[");
			System.out.println("(CallR #\"&&[f2]\" 2)");
			System.out.println("];");
			System.out.println("}}");
			System.out.println("*");
			System.out.println("{{");
			System.out.println("#\"&&[f2]\" = ");
			System.out.println("[");
			System.out.println("(Fetch 0)");
			System.out.println("(GoFalse _false)");
			System.out.println("(Fetch 1)");
			System.out.println("(GoFalse _false)");
			System.out.println("(GoTrue _true)");
			System.out.println("_false:");
			System.out.println("(MakeValR false)");
			System.out.println("_true:");
			System.out.println("(MakeValR true)");
			System.out.println("];");
			System.out.println("}}");
			System.out.println("*");
			System.out.println("{{");
			System.out.println("#\"||[f2]\" = ");
			System.out.println("[");
			System.out.println("(Fetch 0)");
			System.out.println("(GoTrue _true)");
			System.out.println("(Fetch 1)");
			System.out.println("(GoTrue _true)");
			System.out.println("(GoFalse _false)");
			System.out.println("_false:");
			System.out.println("(MakeValR false)");
			System.out.println("_true:");
			System.out.println("(MakeValR true)");
			System.out.println("];");
			System.out.println("}}");
		}
		if (generateExp) {
			System.out.println("*");
			System.out.println("{{");
			System.out.println("#\"^[f2]\" =");
			System.out.println("[");
			System.out.println(";;; While loop");
			System.out.println(";;; var c;");
			System.out.println("(MakeVal 1)");
			System.out.println("(Push)");
			System.out.println("(Go _loopCheck)");
			System.out.println("_loopStart:");
			System.out.println(";;; if( b%2 == 0 )");
			System.out.println("(Fetch 1)");
			System.out.println("(MakeValP 2)");
			System.out.println("(Call #\"%[f2]\" 2)");
			System.out.println("(MakeValP 0)");
			System.out.println("(Call #\"==[f2]\" 2)");
			System.out.println("(GoTrue _true)");
			System.out.println("(GoFalse _false)");
			System.out.println("_loopContinue:");
			System.out.println("(Go _loopCheck)");
			System.out.println("_true:");
			System.out.println(";;; a = a*a");
			System.out.println("(Fetch 0)");
			System.out.println("(FetchP 0)");
			System.out.println("(Call #\"*[f2]\" 2)");
			System.out.println("(Store 0)");
			System.out.println(";;; b = b/2");
			System.out.println("(Fetch 1)");
			System.out.println("(MakeValP 2)");
			System.out.println("(Call #\"/[f2]\" 2)");
			System.out.println("(Store 1)");
			System.out.println("(Go _loopContinue)");
			System.out.println("_false:");
			System.out.println(";;; c = c*a");
			System.out.println("(Fetch 2)");
			System.out.println("(FetchP 0)");
			System.out.println("(Call #\"*[f2]\" 2)");
			System.out.println("(Store 2)");
			System.out.println(";;; b = b-1");
			System.out.println("(Fetch 1)");
			System.out.println("(MakeValP 1)");
			System.out.println("(Call #\"-[f2]\" 2)");
			System.out.println("(Store 1)");
			System.out.println("(Go _loopContinue)");
			System.out.println(";;; b > 1");
			System.out.println("_loopCheck:");
			System.out.println("(Fetch 1)");
			System.out.println("(MakeValP 1)");
			System.out.println("(Call #\">[f2]\" 2)");
			System.out.println("(GoTrue _loopStart)");
			System.out.println(";;; return a*c");
			System.out.println("(Fetch 0)");
			System.out.println("(FetchP 2)");
			System.out.println("(CallR #\"*[f2]\" 2)");
			System.out.println("];");
			System.out.println("}}");
		}
		System.out.println("*");
		System.out.println("BASIS;");
	}

	static void generateFunction(Object[] fun) {
		// [name,argcount,varcount,exprs]
		String name = (String) fun[0];
		Integer argCount = (Integer) fun[1];
		Integer varCount = (Integer) fun[2];
		debug(String.format(
					"Generating function %s with %d arguments, and %d local variables.",
					name, argCount, varCount));
		Object[] exprs = (Object[]) fun[3];
		System.out.println("#\"" + name + "[f" + argCount + "]\"" + " =");
		System.out.println("[");
		for (int i = 0; i < varCount; i++) {
			System.out.println("(MakeVal null)");
			System.out.println("(Push)");
		}
		for (Object expr : exprs) {
			generateExpr((Object[]) expr);
		}
		System.out.println("(Return)");
		System.out.println("];");
    }

    // All existing labels, i.e. labels the generated
    // code that we have already produced, should be
    // of form
    // _xxxx
    // where xxxx corresponds to an integer n
    // such that 0 <= n < nextLabel.
    // So we should update nextLabel as we generate
    // new labels.
    // The first generated label would be _0, the
    // next would be _1, and so on.
    private static int nextLabel = 0;

    // Returns a new, previously unused, label.
    // Useful for control-flow expressions.
    static String newLabel() {
        return "_" + (nextLabel++);
    }

    static void generateExpr(Object[] e) {
		String command = (String) e[0];
		if (command.equals("RETURN")) {
			Object[] expression = (Object[]) e[1];
			generateExpr(expression);
			System.out.println("(Return)");
		}
		else if (command.equals("STORE")) {
			Integer position = (Integer) e[1];
			Object[] expression = (Object[]) e[2];
			generateExpr(expression);
			System.out.printf("(Store %d)\n", position);
		}
		else if (command.equals("NOT")) {
			Object[] expression = (Object[]) e[1];
			generateExpr(expression);
			System.out.println("(Not)");
		}
		else if (command.equals("CALL")) {
			String function = (String) e[1];
			Object[] arguments = (Object[]) e[2];
			int argCount = arguments.length;
			debug(String.format("Calling %s with %d arguments", function, argCount));
			if (argCount != 0) {
				if (arguments[0] instanceof String) {
					generateExpr(arguments);
					argCount = arguments.length - 1;
				}
				else {
					generateExpr((Object[]) arguments[0]);
					for (int i = 1; i < arguments.length; i++) {
						System.out.println("(Push)");
						generateExpr((Object[]) arguments[i]);
					}
				}
			}
			System.out.printf("(Call #\"%s[f%d]\" %2$d)\n", function, argCount);
		}
		else if (command.equals("FETCH")) {
			Integer position = (Integer) e[1];
			System.out.printf("(Fetch %d)\n", position);
		}
		else if (command.equals("LITERAL")) {
			String literal = (String) e[1];
			System.out.printf("(MakeVal %s)\n", literal);
		}
		else if (command.equals("IF")) {
			Object[] condition = (Object[]) e[1];
			Object[] body = (Object[]) e[2];
			Object[] elseblock = (Object[]) e[3];
			generateExpr(condition);
			String label = newLabel();
			System.out.printf("(GoFalse %s)\n", label);
			generateBody(body);
			System.out.printf("%s:\n", label);
			if (elseblock != null)
				generateExpr(elseblock);
		}
		else if (command.equals("WHILE")) {
			Object[] condition = (Object[]) e[1];
			Object[] body = (Object[]) e[2];
			String loopCheck = newLabel();
			String loopStart = newLabel();
			System.out.printf("(Go %s)\n", loopCheck);
			System.out.printf("%s:\n", loopStart);
			generateBody(body);
			System.out.printf("%s:\n", loopCheck);
			generateExpr(condition);
			System.out.printf("(GoTrue %s)\n", loopStart);
		}
		else if (command.equals("BODY")) {
			generateBody(e);
		}
    }

    static void generateBody(Object[] bodies) {
		Object[] expressions = (Object[]) bodies[1];
		for (Object expression : expressions) {
			generateExpr((Object[]) expression);
		}
    }


