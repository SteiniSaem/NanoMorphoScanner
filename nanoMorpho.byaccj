%{
	import java.io.*;
	import java.util.HashMap;
	import java.util.Arrays;
	import java.util.Vector;
%}

%token <sval> NAME, VAR, OPNAME, LITERAL, IF, ELSIF, ELSE, RETURN, WHILE, ERROR
%type<oval> program, start, function, expr_star, expr_plus, decl_star, decl_plus, decl_atom, name_star, name_plus, expr, binopexpr, opname_smallexpr_plus, smallexpr, ifexpr, ifexpr_elif, ifexpr_else, body

%%

start
	:	program {generateProgram(name, ((Vector<Object>)($1)).toArray()); }
	;

program
	:	function program	{ ((Vector<Object>)($1)).add($1); $$=$2; }
	|	function			{$$=new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	;

function
	:	{
			argsCount = 0;
			varCount = 0;
			varTable = new HashMap<String,Integer>();
		}
		NAME '(' name_star ')' '{' decl_star expr_star '}'
		{
			$$ = new Object[]{$2, $4, $7, $8};
		}
	;

expr_star
	:	expr_plus	{$$ = $1;}
	|	
	;

expr_plus
	:	expr_plus ',' expr 	/* TODO */ {}
	|	expr 				{$$ = $1;}
	;

decl_star
	:	decl_plus	{$$ = $1;}
	|				{$$ = 0;}
	;
decl_plus
	:	decl_plus decl_atom	{$$ = $1 + $2;}
	|	decl_atom			{$$ = $1;}
	;

decl_atom
	:	VAR name_plus ';'	{$$ = $2;}
	;

name_star
	:	name_plus	{$$ = $1; }
	|	{debug("Hello from name_star");}
	;

name_plus
	:	name_plus ',' NAME 	{$$ = $1 + 1;}
	|	NAME 				{$$ = 1;}
	;

expr
	:	RETURN expr 	{$$ = new Object[]{"RETURN", $2};}
	|	NAME '=' expr 	{$$ = new Object[]{"STORE", findVar($1), $3};}
	|	binopexpr		{$$ = $1;}
	;

binopexpr
	:	smallexpr opname_smallexpr_plus	/* TODO */
	;

opname_smallexpr_plus
	:	opname_smallexpr_plus OPNAME smallexpr
	|	OPNAME smallexpr
	;

smallexpr
	:	NAME 	 				{$$ = new Object[]{"FETCH", findVar($1)};}
	|	NAME '(' expr_star ')'	{$$ = new Object[]{"CALL", $1, $3};}	
	|	OPNAME smallexpr 		{$$ = new Object[]{"CALL", $1, $2};}
	|	LITERAL					{$$ = new Object[]{"LITERAL", $1};}
	|	'(' expr ')'			{$$ = $2;}
	|	ifexpr 					{$$ = $1;}
	|	WHILE '(' expr ')' body	{$$ = new Object[]{"WHILE", $3, $5};}
	;

ifexpr
	:	IF '(' expr ')' body ifexpr_elif	{$$ = new Object[]{"IF", $3, $5, $6};}
	;

ifexpr_elif
	:	ELSIF '(' expr ')' body ifexpr_elif	{$$ = new Object[]{"IF", $3, $5, $6}; }
	|	ifexpr_else							{$$ = $1;}
	|
	;

ifexpr_else
	:	ELSE body	{$$ = new Object[]{"IF", new Object[] {"LITERAL", "true"}, $2, null};}
	;

body
	:	'{' expr_plus '}'	{$$ = new Object[]{"BODY", $2};}
	;


%%

	static private String name;
	private int argsCount;
	private int varCount;
	private HashMap<String,Integer> varTable;

	private void addVar( String name )
	{
		if( varTable.get(name) != null )
			yyerror("Variable "+name+" already exists");
		varTable.put(name,varCount++);
	}

	private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable "+name+" does not exist");
		return res;
	}

	private int yylex() {
		int yyl_return = -1;
		try {
			NanoMorphoLexer.advance();
			yyl_return = NanoMorphoLexer.getToken1();
			yylval = new ParserVal(NanoMorphoLexer.getLexeme());
		}
		catch (IOException e) {
			System.err.println("IO error: "+e);
		}
		catch (Exception e) {
			System.err.println("Lexer error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error ) {
		System.err.println("Error: "+error);
		System.exit(1);
	}

	public Parser( String r ) throws Exception
	{
		NanoMorphoLexer.startLexer(r);
	}
