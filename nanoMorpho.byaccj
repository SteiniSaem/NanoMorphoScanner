%{
	import java.io.*;
	import java.util.HashMap;
	import java.util.Arrays;
%}

%token <sval> NAME, VAR, OPNAME, LITERAL, IF, ELSIF, ELSE, RETURN, WHILE, ERROR

%%

start
	:	program
	;

program
	:	function program
	|
	;

function
	:	NAME '(' name_star ')' '{' decl_star expr_star '}'
	;

expr_star
	:	expr_plus
	|
	;

expr_plus
	:	expr_plus ',' expr
	|	expr
	;

decl_star
	:	decl_plus
	|
	;
decl_plus
	:	decl_plus decl_atom
	|	decl_atom
	;

decl_atom
	:	VAR name_plus ';'
	;

name_star
	:	name_plus
	|	{debug("Hello from name_star");}
	;

name_plus
	:	name_plus ',' NAME
	|	NAME
	;

expr
	:	RETURN expr
	|	NAME '=' expr
	|	binopexpr
	;

binopexpr
	:	smallexpr opname_smallexpr_plus
	;

opname_smallexpr_plus
	:	opname_smallexpr_plus OPNAME smallexpr
	|	OPNAME smallexpr
	;

smallexpr
	:	NAME
	|	NAME '(' expr_star ')'
	|	OPNAME smallexpr
	|	LITERAL
	|	'(' expr ')'
	|	ifexpr
	|	WHILE '(' expr ')' body
	;

ifexpr
	:	IF '(' expr ')' body ifexpr_elif
	;

ifexpr_elif
	:	ELSIF '(' expr ')' body ifexpr_elif
	|	ifexpr_else
	|
	;

ifexpr_else
	:	ELSE body
	;

body
	:	'{' expr_plus '}'
	;


%%

	private int yylex() {
		int yyl_return = -1;
		try {
			NanoMorphoLexer.advance();
			yyl_return = NanoMorphoLexer.getToken1();
			yylval = new ParserVal(NanoMorphoLexer.getLexeme());
		}
		catch (IOException e) {
			System.err.println("IO error: "+e);
		}
		catch (Exception e) {
			System.err.println("Lexer error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error ) {
		System.err.println("Error: "+error);
		System.exit(1);
	}

	public Parser( String r ) throws Exception
	{
		NanoMorphoLexer.startLexer(r);
	}
