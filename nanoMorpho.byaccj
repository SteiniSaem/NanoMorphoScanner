%{
	import java.io.*;
	import java.util.HashMap;
	import java.util.Arrays;
%}

%token <sval> NAME, VAR, OP1, OP2, OP3, OP4, OP5, OP6, OP7, OP8, LITERAL, IF, ELSIF, ELSE, RETURN, WHILE, ERROR
%type<obj> program, start, function, expr_star, expr_plus, decl_star, decl_plus, decl_atom, name_star, name_plus, expr, binopexpr1, binopexpr2, binopexpr3, binopexpr4, binopexpr5, binopexpr6, binopexpr7, binopexpr8, smallexpr, ifexpr, ifexpr_elif, ifexpr_else, body
%type<obj> expr_line, expr_line_plus
%type<sval> op
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%left OP8
%left UNOP

%%

start
	:	program					{NanoMorphoFinalCodeGenerator.generateProgram(filename, (Object[]) $1);}
	;

program
	:	function program		{$$ = append($2, $1);}
	|	function				{$$ = new Object[]{$1};}
	;

function
	:							{
									argCount = 0;
									varCount = 0;
									varTable = new HashMap<String,Integer>();
								}
		NAME '(' name_star ')' '{' decl_star expr_line_plus '}'
								{
									$$ = new Object[]{$2, argCount, varCount, $8};
								}
	;

expr_line_plus
	:	expr_line_plus
			expr_line			{$$ = append($1, $2);}
	|	expr_line				{$$ = new Object[]{$1};}
	;

expr_line
	:	expr ';'				{$$ = $1;}
	;

expr_star
	:	expr_plus				{$$ = $1;}
	|							{$$ = new Object[0];}
	;

expr_plus
	:	expr_plus ',' expr		{$$ = append($1, $3);}
	|	expr 					{$$ = new Object[]{$1};}
	;

decl_star
	:	decl_plus				{$$ = $1;}
	|							{$$ = new Object[0];}
	;

decl_plus
	:	decl_plus decl_atom		{$$ = append($1, $2);}
	|	decl_atom				{$$ = new Object[]{$1};}
	;

decl_atom
	:	VAR name_plus ';'		{
									for (Object name : (Object[])($2))
									{
										addVar((String) name);
									}
									$$ = $2;
								}
	;

name_star
	:	name_plus				{$$ = $1;}
	|							{$$ = new Object[0];}
	;

name_plus
	:	name_plus ',' NAME 		{$$ =  append($1, $3);}
	|	NAME 					{$$ = new Object[]{$1};}
	;

expr
	:	RETURN expr 			{$$ = new Object[]{"RETURN", $2};}
	|	NAME '=' expr 			{$$ = new Object[]{"STORE", findVar($1), $3};}
	|	binopexpr1				{$$ = $1;}
	;

binopexpr1
	:	binopexpr1 OP1 binopexpr2	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr2					{$$ = $1;}
	;
binopexpr2
	:	binopexpr2 OP2 binopexpr3	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr3					{$$ = $1;}
	;

binopexpr3
	:	binopexpr3 OP3 binopexpr4	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr4					{$$ = $1;}
	;

binopexpr4
	:	binopexpr4 OP4 binopexpr5	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr5					{$$ = $1;}
	;

binopexpr5
	:	binopexpr5 OP5 binopexpr6	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr6					{$$ = $1;}
	;

binopexpr6
	:	binopexpr6 OP6 binopexpr7	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr7					{$$ = $1;}
	;

binopexpr7
	:	binopexpr7 OP7 binopexpr8	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	binopexpr8					{$$ = $1;}
	;

binopexpr8
	:	binopexpr8 OP8 smallexpr	{$$ = new Object[]{"CALL", $2, new Object[]{$1, $3}};}
	|	smallexpr					{$$ = $1;}
	;



smallexpr
	:	NAME 	 				{$$ = new Object[]{"FETCH", findVar($1)};}
	|	NAME '(' expr_star ')'	{$$ = new Object[]{"CALL", $1, $3};}
	|	op smallexpr 			{$$ = new Object[]{"CALL", $1, $2};}
	|	LITERAL					{$$ = new Object[]{"LITERAL", $1};}
	|	'(' expr ')'			{$$ = $2;}
	|	ifexpr 					{$$ = $1;}
	|	WHILE '(' expr ')' body	{$$ = new Object[]{"WHILE", $3, $5};}
	;

ifexpr
	:	IF
			'('
			expr
			')'
			body
			ifexpr_elif
								{$$ = new Object[]{"IF", $3, $5, $6};}
	;

ifexpr_elif
	:	ELSIF
			'('
			expr
			')'
			body
			ifexpr_elif
								{$$ = new Object[]{"IF", $3, $5, $6};}
	|	ifexpr_else				{$$ = $1;}
	|							{$$ = new Object[]{"BODY", new Object[0]};}
	;

ifexpr_else
	:	ELSE body				{$$ = new Object[]{"IF", new Object[] {"LITERAL", "true"}, $2, null};}
	;

body
	:	'{' expr_line_plus '}'		{$$ = new Object[]{"BODY", $2};}
	;

op	:	OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 ;

%%

	static public String filename;
	private int argCount;
	private int varCount;
	private HashMap<String,Integer> varTable;
	private NanoMorphoLexer lexer;
	private int last_token_read;

	private Object[] append(Object arr, Object x)
	{
		return append((Object[]) arr, x);
	}
	private Object[] append(Object[] arr, Object x)
	{
		Object[] ret = Arrays.copyOf(arr, arr.length+1);
		ret[ret.length-1] = x;
		return ret;
	}

	private void addVar( String name )
	{
		if( varTable.get(name) != null )
			yyerror("Variable "+name+" already exists");
		varTable.put(name,varCount++);
	}

	private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable "+name+" does not exist");
		return res;
	}

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = null;
			last_token_read = yyl_return = lexer.yylex();
			if( yylval==null )
				yylval = new ParserVal(Parser.yyname[yyl_return]);
		}
		catch (IOException e)
		{
			System.err.println("IO error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error ) {
		System.err.println("Error: "+error + " Line: " + lexer.getLine());
		System.out.println("Token:  " + Parser.yyname[last_token_read]);
		System.exit(1);
	}

	public Parser( Reader r ) throws Exception
	{
		lexer = new NanoMorphoLexer(r,this);
	}
